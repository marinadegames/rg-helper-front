{"ast":null,"code":"// init state\nimport { TEMP_PATIENTS } from \"./TEMPSTATE\";\nconst PatientsState = {\n  patients: TEMP_PATIENTS,\n  searchResult: []\n}; // reducer\n\nexport const patientsReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : PatientsState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"ADD_PATIENT\":\n      return { ...state,\n        patients: [...state.patients, action.payload]\n      };\n\n    case \"SEARCH_PATIENT\":\n      return { ...state,\n        searchResult: [...state.patients].filter(item => item.name.toLowerCase().includes(action.value.toLowerCase()))\n      };\n\n    case \"EDIT_RES_TYPE_PATIENT\":\n      let copyRes = null;\n      let copyState = { ...state\n      };\n      let copyPat = copyState.patients.find(pat => pat.id == action.idPat);\n\n      if (copyPat) {\n        copyRes = copyPat.researches.find(res => res.idRes === action.idRes);\n\n        if (copyRes) {\n          copyRes.typeRes = action.value;\n        }\n      }\n\n      return copyState;\n\n    default:\n      return state;\n  }\n}; // AC\n\nexport const AddPatientsAC = payload => {\n  return {\n    type: \"ADD_PATIENT\",\n    payload\n  };\n};\n_c = AddPatientsAC;\nexport const SearchPatientsAC = value => {\n  return {\n    type: \"SEARCH_PATIENT\",\n    value\n  };\n};\n_c2 = SearchPatientsAC;\nexport const EditResearchTypePatient = (value, idRes, idPat) => {\n  return {\n    type: \"EDIT_RES_TYPE_PATIENT\",\n    value,\n    idRes,\n    idPat\n  };\n}; // TC\n\n_c3 = EditResearchTypePatient;\nexport const AddPatientTC = payload => async dispatch => {\n  try {\n    console.log(payload);\n    await dispatch(AddPatientsAC(payload));\n  } catch {\n    console.warn('ERROR');\n  } finally {}\n}; // types\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"AddPatientsAC\");\n$RefreshReg$(_c2, \"SearchPatientsAC\");\n$RefreshReg$(_c3, \"EditResearchTypePatient\");","map":{"version":3,"sources":["D:/projects/temp/frontend/src/Redux/patientsReducer.ts"],"names":["TEMP_PATIENTS","PatientsState","patients","searchResult","patientsReducer","state","action","type","payload","filter","item","name","toLowerCase","includes","value","copyRes","copyState","copyPat","find","pat","id","idPat","researches","res","idRes","typeRes","AddPatientsAC","SearchPatientsAC","EditResearchTypePatient","AddPatientTC","dispatch","console","log","warn"],"mappings":"AAAA;AAEA,SAAQA,aAAR,QAA4B,aAA5B;AAGA,MAAMC,aAAgC,GAAG;AACrCC,EAAAA,QAAQ,EAAEF,aAD2B;AAErCG,EAAAA,YAAY,EAAE;AAFuB,CAAzC,C,CAKA;;AACA,OAAO,MAAMC,eAAe,GAAG,YAAkE;AAAA,MAAjEC,KAAiE,uEAAzDJ,aAAyD;AAAA,MAA1CK,MAA0C;;AAC7F,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,aAAL;AACI,aAAO,EAAC,GAAGF,KAAJ;AAAWH,QAAAA,QAAQ,EAAE,CAAC,GAAGG,KAAK,CAACH,QAAV,EAAoBI,MAAM,CAACE,OAA3B;AAArB,OAAP;;AACJ,SAAK,gBAAL;AACI,aAAO,EACH,GAAGH,KADA;AACOF,QAAAA,YAAY,EAAE,CAAC,GAAGE,KAAK,CAACH,QAAV,EAAoBO,MAApB,CAA4BC,IAAD,IAC/CA,IAAI,CAACC,IAAL,CAAUC,WAAV,GAAwBC,QAAxB,CAAiCP,MAAM,CAACQ,KAAP,CAAaF,WAAb,EAAjC,CADoB;AADrB,OAAP;;AAIJ,SAAK,uBAAL;AACI,UAAIG,OAAO,GAAG,IAAd;AACA,UAAIC,SAAS,GAAG,EAAC,GAAGX;AAAJ,OAAhB;AACA,UAAIY,OAAO,GAAGD,SAAS,CAACd,QAAV,CAAmBgB,IAAnB,CAAwBC,GAAG,IAAIA,GAAG,CAACC,EAAJ,IAAUd,MAAM,CAACe,KAAhD,CAAd;;AACA,UAAIJ,OAAJ,EAAa;AACTF,QAAAA,OAAO,GAAGE,OAAO,CAACK,UAAR,CAAmBJ,IAAnB,CAAwBK,GAAG,IAAIA,GAAG,CAACC,KAAJ,KAAclB,MAAM,CAACkB,KAApD,CAAV;;AACA,YAAIT,OAAJ,EAAa;AACTA,UAAAA,OAAO,CAACU,OAAR,GAAkBnB,MAAM,CAACQ,KAAzB;AACH;AACJ;;AACD,aAAOE,SAAP;;AACJ;AACI,aAAOX,KAAP;AApBR;AAsBH,CAvBM,C,CAyBP;;AACA,OAAO,MAAMqB,aAAa,GAAIlB,OAAD,IAAwC;AACjE,SAAO;AAACD,IAAAA,IAAI,EAAE,aAAP;AAAsBC,IAAAA;AAAtB,GAAP;AACH,CAFM;KAAMkB,a;AAIb,OAAO,MAAMC,gBAAgB,GAAIb,KAAD,IAAoC;AAChE,SAAO;AAACP,IAAAA,IAAI,EAAE,gBAAP;AAAyBO,IAAAA;AAAzB,GAAP;AACH,CAFM;MAAMa,gB;AAIb,OAAO,MAAMC,uBAAuB,GAAG,CAACd,KAAD,EAAgBU,KAAhB,EAA+BH,KAA/B,KAA4E;AAC/G,SAAO;AAACd,IAAAA,IAAI,EAAE,uBAAP;AAAgCO,IAAAA,KAAhC;AAAuCU,IAAAA,KAAvC;AAA8CH,IAAAA;AAA9C,GAAP;AACH,CAFM,C,CAIP;;MAJaO,uB;AAKb,OAAO,MAAMC,YAAY,GAAIrB,OAAD,IAA0B,MAAOsB,QAAP,IAAmC;AACrF,MAAI;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYxB,OAAZ;AACA,UAAMsB,QAAQ,CAACJ,aAAa,CAAClB,OAAD,CAAd,CAAd;AACH,GAHD,CAGE,MAAM;AACJuB,IAAAA,OAAO,CAACE,IAAR,CAAa,OAAb;AACH,GALD,SAKU,CACT;AACJ,CARM,C,CAWP","sourcesContent":["// init state\r\nimport {Dispatch} from \"react\";\r\nimport {TEMP_PATIENTS} from \"./TEMPSTATE\";\r\nimport {debug} from \"util\";\r\n\r\nconst PatientsState: PatientsStateType = {\r\n    patients: TEMP_PATIENTS,\r\n    searchResult: []\r\n}\r\n\r\n// reducer\r\nexport const patientsReducer = (state = PatientsState, action: ActionType): PatientsStateType => {\r\n    switch (action.type) {\r\n        case \"ADD_PATIENT\":\r\n            return {...state, patients: [...state.patients, action.payload]}\r\n        case \"SEARCH_PATIENT\":\r\n            return {\r\n                ...state, searchResult: [...state.patients].filter((item) =>\r\n                    item.name.toLowerCase().includes(action.value.toLowerCase()))\r\n            };\r\n        case \"EDIT_RES_TYPE_PATIENT\":\r\n            let copyRes = null\r\n            let copyState = {...state}\r\n            let copyPat = copyState.patients.find(pat => pat.id == action.idPat)\r\n            if (copyPat) {\r\n                copyRes = copyPat.researches.find(res => res.idRes === action.idRes)\r\n                if (copyRes) {\r\n                    copyRes.typeRes = action.value\r\n                }\r\n            }\r\n            return copyState\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// AC\r\nexport const AddPatientsAC = (payload: PatientType): AddPatientAT => {\r\n    return {type: \"ADD_PATIENT\", payload}\r\n}\r\n\r\nexport const SearchPatientsAC = (value: string): SearchPatientAT => {\r\n    return {type: \"SEARCH_PATIENT\", value}\r\n}\r\n\r\nexport const EditResearchTypePatient = (value: string, idRes: string, idPat: number): EditResearchTypePatientAT => {\r\n    return {type: \"EDIT_RES_TYPE_PATIENT\", value, idRes, idPat}\r\n}\r\n\r\n// TC\r\nexport const AddPatientTC = (payload: PatientType) => async (dispatch: Dispatch<any>) => {\r\n    try {\r\n        console.log(payload)\r\n        await dispatch(AddPatientsAC(payload))\r\n    } catch {\r\n        console.warn('ERROR')\r\n    } finally {\r\n    }\r\n}\r\n\r\n\r\n// types\r\nexport type PatientsStateType = {\r\n    patients: Array<PatientType>,\r\n    searchResult: Array<PatientType>\r\n}\r\n\r\nexport type PatientType = {\r\n    id: number // id === xray page number\r\n    name: string\r\n    year: number\r\n    sex: string\r\n    address: string\r\n    researches: Array<ResearchesType>\r\n    description: string | null\r\n    conclusion: string | null\r\n    dateOfReceipt: Date\r\n}\r\nexport type ResearchesType = {\r\n    idRes: string\r\n    typeRes: string\r\n    sizeFilm: SizeType\r\n    amount: number\r\n    projections: number\r\n    dose: number\r\n}\r\n\r\nexport type SizeType = string\r\nexport type ActionType = AddPatientAT | SearchPatientAT | EditResearchTypePatientAT\r\nexport type AddPatientAT = {\r\n    type: 'ADD_PATIENT'\r\n    payload: PatientType\r\n}\r\nexport type SearchPatientAT = {\r\n    type: 'SEARCH_PATIENT'\r\n    value: string\r\n}\r\n\r\nexport type EditResearchTypePatientAT = {\r\n    type: 'EDIT_RES_TYPE_PATIENT'\r\n    idRes: string\r\n    idPat: number\r\n    value: string\r\n}\r\n"]},"metadata":{},"sourceType":"module"}