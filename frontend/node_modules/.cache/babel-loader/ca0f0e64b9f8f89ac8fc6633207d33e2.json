{"ast":null,"code":"// import\n// init state\nconst appState = {\n  error: '',\n  errorMode: false,\n  successful: '',\n  successfulMode: false\n}; // reducer\n\nexport const appReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : appState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"SET_ERROR\":\n      return { ...state,\n        error: action.message\n      };\n\n    case \"SET_ERROR_MODE\":\n      return { ...state,\n        errorMode: action.mode\n      };\n\n    case \"SET_SUCCESSFUL\":\n      return { ...state,\n        successful: action.message\n      };\n\n    case \"SET_SUCCESSFUL_MODE\":\n      return { ...state,\n        successfulMode: action.mode\n      };\n\n    default:\n      return state;\n  }\n}; // AC\n\nexport const setErrorMessage = message => ({\n  type: \"SET_ERROR\",\n  message\n});\nexport const setNotificationMode = mode => ({\n  type: \"SET_ERROR_MODE\",\n  mode\n});\nexport const setSuccessfulMessage = message => ({\n  type: \"SET_SUCCESSFUL\",\n  message\n});\nexport const setSuccessfulMode = mode => ({\n  type: \"SET_SUCCESSFUL_MODE\",\n  mode\n}); // TC\n\nexport const setErrorMessageTC = message => async dispatch => {\n  dispatch(setErrorMessage(message));\n  dispatch(setNotificationMode(true));\n  await setTimeout(() => {\n    dispatch(setNotificationMode(false));\n  }, 5000);\n};\nexport const setSuccessfulMessageTC = message => async dispatch => {\n  dispatch(setSuccessfulMessage(message));\n  dispatch(setSuccessfulMode(true));\n  await setTimeout(() => {\n    dispatch(setSuccessfulMode(false));\n  }, 5000);\n}; // types","map":{"version":3,"sources":["D:/projects/temp/frontend/src/Redux/appReducer.ts"],"names":["appState","error","errorMode","successful","successfulMode","appReducer","state","action","type","message","mode","setErrorMessage","setNotificationMode","setSuccessfulMessage","setSuccessfulMode","setErrorMessageTC","dispatch","setTimeout","setSuccessfulMessageTC"],"mappings":"AAAA;AAGA;AAEA,MAAMA,QAAwB,GAAG;AAC7BC,EAAAA,KAAK,EAAE,EADsB;AAE7BC,EAAAA,SAAS,EAAE,KAFkB;AAG7BC,EAAAA,UAAU,EAAE,EAHiB;AAI7BC,EAAAA,cAAc,EAAE;AAJa,CAAjC,C,CAOA;;AACA,OAAO,MAAMC,UAAU,GAAG,YAA0D;AAAA,MAAzDC,KAAyD,uEAAjDN,QAAiD;AAAA,MAAvCO,MAAuC;;AAChF,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,WAAL;AACI,aAAO,EAAC,GAAGF,KAAJ;AAAWL,QAAAA,KAAK,EAAEM,MAAM,CAACE;AAAzB,OAAP;;AACJ,SAAK,gBAAL;AACI,aAAO,EAAC,GAAGH,KAAJ;AAAWJ,QAAAA,SAAS,EAAEK,MAAM,CAACG;AAA7B,OAAP;;AACJ,SAAK,gBAAL;AACI,aAAO,EAAC,GAAGJ,KAAJ;AAAWH,QAAAA,UAAU,EAAEI,MAAM,CAACE;AAA9B,OAAP;;AACJ,SAAK,qBAAL;AACI,aAAO,EAAC,GAAGH,KAAJ;AAAWF,QAAAA,cAAc,EAAEG,MAAM,CAACG;AAAlC,OAAP;;AACJ;AACI,aAAOJ,KAAP;AAVR;AAYH,CAbM,C,CAeP;;AACA,OAAO,MAAMK,eAAe,GAAIF,OAAD,KAAsB;AAACD,EAAAA,IAAI,EAAE,WAAP;AAAoBC,EAAAA;AAApB,CAAtB,CAAxB;AACP,OAAO,MAAMG,mBAAmB,GAAIF,IAAD,KAAoB;AAACF,EAAAA,IAAI,EAAE,gBAAP;AAAyBE,EAAAA;AAAzB,CAApB,CAA5B;AACP,OAAO,MAAMG,oBAAoB,GAAIJ,OAAD,KAAsB;AAACD,EAAAA,IAAI,EAAE,gBAAP;AAAyBC,EAAAA;AAAzB,CAAtB,CAA7B;AACP,OAAO,MAAMK,iBAAiB,GAAIJ,IAAD,KAAoB;AAACF,EAAAA,IAAI,EAAE,qBAAP;AAA8BE,EAAAA;AAA9B,CAApB,CAA1B,C,CAEP;;AACA,OAAO,MAAMK,iBAAiB,GAAIN,OAAD,IAAqB,MAAOO,QAAP,IAAmC;AACrFA,EAAAA,QAAQ,CAACL,eAAe,CAACF,OAAD,CAAhB,CAAR;AACAO,EAAAA,QAAQ,CAACJ,mBAAmB,CAAC,IAAD,CAApB,CAAR;AACA,QAAMK,UAAU,CAAC,MAAM;AACnBD,IAAAA,QAAQ,CAACJ,mBAAmB,CAAC,KAAD,CAApB,CAAR;AACH,GAFe,EAEb,IAFa,CAAhB;AAGH,CANM;AAOP,OAAO,MAAMM,sBAAsB,GAAIT,OAAD,IAAqB,MAAOO,QAAP,IAAmC;AAC1FA,EAAAA,QAAQ,CAACH,oBAAoB,CAACJ,OAAD,CAArB,CAAR;AACAO,EAAAA,QAAQ,CAACF,iBAAiB,CAAC,IAAD,CAAlB,CAAR;AACA,QAAMG,UAAU,CAAC,MAAM;AACnBD,IAAAA,QAAQ,CAACF,iBAAiB,CAAC,KAAD,CAAlB,CAAR;AACH,GAFe,EAEb,IAFa,CAAhB;AAGH,CANM,C,CASP","sourcesContent":["// import\r\nimport {Dispatch} from \"react\";\r\n\r\n// init state\r\n\r\nconst appState: AppReducerType = {\r\n    error: '',\r\n    errorMode: false,\r\n    successful: '',\r\n    successfulMode: false\r\n}\r\n\r\n// reducer\r\nexport const appReducer = (state = appState, action: ActionType): AppReducerType => {\r\n    switch (action.type) {\r\n        case \"SET_ERROR\":\r\n            return {...state, error: action.message}\r\n        case \"SET_ERROR_MODE\":\r\n            return {...state, errorMode: action.mode}\r\n        case \"SET_SUCCESSFUL\":\r\n            return {...state, successful: action.message}\r\n        case \"SET_SUCCESSFUL_MODE\":\r\n            return {...state, successfulMode: action.mode}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// AC\r\nexport const setErrorMessage = (message: string) => ({type: \"SET_ERROR\", message} as const)\r\nexport const setNotificationMode = (mode: boolean) => ({type: \"SET_ERROR_MODE\", mode} as const)\r\nexport const setSuccessfulMessage = (message: string) => ({type: \"SET_SUCCESSFUL\", message} as const)\r\nexport const setSuccessfulMode = (mode: boolean) => ({type: \"SET_SUCCESSFUL_MODE\", mode} as const)\r\n\r\n// TC\r\nexport const setErrorMessageTC = (message: string) => async (dispatch: Dispatch<any>) => {\r\n    dispatch(setErrorMessage(message))\r\n    dispatch(setNotificationMode(true))\r\n    await setTimeout(() => {\r\n        dispatch(setNotificationMode(false))\r\n    }, 5000)\r\n}\r\nexport const setSuccessfulMessageTC = (message: string) => async (dispatch: Dispatch<any>) => {\r\n    dispatch(setSuccessfulMessage(message))\r\n    dispatch(setSuccessfulMode(true))\r\n    await setTimeout(() => {\r\n        dispatch(setSuccessfulMode(false))\r\n    }, 5000)\r\n}\r\n\r\n\r\n// types\r\ntype AppReducerType = {\r\n    error: string\r\n    errorMode: boolean\r\n    successful: string\r\n    successfulMode: boolean\r\n}\r\ntype ActionType =\r\n    | ReturnType<typeof setErrorMessage>\r\n    | ReturnType<typeof setNotificationMode>\r\n    | ReturnType<typeof setSuccessfulMessage>\r\n    | ReturnType<typeof setSuccessfulMode>"]},"metadata":{},"sourceType":"module"}